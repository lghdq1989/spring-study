import com.google.common.collect.Lists;
import com.midea.logistics.common.mobile.service.BaseMobileService;
import com.midea.logistics.common.mobile.util.helper.ConverterHelper;
import com.midea.logistics.domain.mobile.domain.driver.dto.lcp.response.transport.Transport;
import com.midea.logistics.domain.mobile.domain.supplier.request.SupplierTransportRequest;
import com.midea.logistics.mobile.supplier.task.SupplierTransportTask;
import com.mideaframework.core.web.JsonResponse;
import com.mideaframework.core.web.PageResponse;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.Future;

@Component
@Slf4j
public class SupplierServiceTaskManager extends BaseMobileService {

    @Autowired
    SupplierServiceManager supplierManager;
    @Autowired
    SupplierTransportTask transportTask;

    public JsonResponse searchTransports(SupplierTransportRequest transportRequest){
        JsonResponse response = new JsonResponse();
        List listResult = Lists.newArrayList();
        Map platformMap = supplierManager.getPlatforms();
        List<Future<JsonResponse>> futureList = new ArrayList<Future<JsonResponse>>();
        for(Object platform : platformMap.values()){
                if(StringUtils.isNotBlank(platform.toString())){
                    transportRequest.setPlatform(platform.toString());
                    Future<JsonResponse> future= transportTask.searchTransports(transportRequest);
                    futureList.add(future);
                }
        }
        List<JsonResponse> jsonResponseList = ConverterHelper.getJsonResponseData(futureList);
        for(JsonResponse jsonResponse : jsonResponseList){
            if(this.checkSuccess(jsonResponse)){
                Object responseObj = jsonResponse.getData();
                if(responseObj instanceof PageResponse){
                    PageResponse<Transport> pageResponse = (PageResponse<Transport>) responseObj;
                    List<Transport> data = pageResponse.getList();
                    listResult.addAll(data);
                }else if(responseObj instanceof Map){
                    Object list = ((Map) responseObj).get("list");
                    if(list instanceof List){
                        listResult.addAll((List)list);
                    }
                }
            }
        }
        PageResponse<Transport> pageResponse = new PageResponse<Transport>();
        pageResponse.init(1,30,listResult.size(),listResult);
        response.setData(pageResponse);
        return response;
    }
}
